install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
library(devtools)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel', force = T)
IRkernel::installspec()
library(devtools)
IRkernel::installspec()
IRkernel::installspec(user = F)
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
library(Amelia)
library(caret)
# Loading data
#p1 <- sql_db("select * from etlt202.p99_consolidation_1")
#p2 <- sql_db("select * from etlt202.p99_consolidation_2")
tmobiledata <- readRDS("C:/Users/lstehlik/Documents/_PROJECTS/TMobile/R/Phase2/CC_model/data/tmobiledata.rds")
# Filtering B/CC
#mydata <- p1 %>%
#  filter(CCB == "CC") %>%
#  left_join(p2, by = "base_id")
mydata <- tmobiledata %>%
filter(CCB == "CC")
tmobiledata <- readRDS("C:/Users/lstehlik/Documents/_PROJECTS/TMobile/R/Phase2/CC_model/data/tmobiledata.rds")
mydata <- tmobiledata
mydata <- mydata %>%
mutate(start_date = as.Date(start_date),
end_date = as.Date(end_date),
obs_date = as.Date(obs_date),
predictor_date = as.Date(predictor_date),
target_start = as.Date(target_start),
target_end = as.Date(target_end))
source("shared_functions.R")
library(tidyverse)
library(Amelia)
library(caret)
mydata <- mydata %>%
mutate(start_date = as.Date(start_date),
end_date = as.Date(end_date),
obs_date = as.Date(obs_date),
predictor_date = as.Date(predictor_date),
target_start = as.Date(target_start),
target_end = as.Date(target_end))
mydata %>%
filter(PIN == 11478006889) %>%
select(start_date, end_date, obs_date, target)
mydata %>%
filter(target == 1) %>%
select(start_date, end_date, obs_date, target)
mydata %>%
filter(target == 1) %>%
select(PIN, start_date, end_date, obs_date, target)
install.packages("flexdashboard")
library(flexdashboard)
install.packages("dygraphs")
install.packages("leaflet")
options(repos="https://CRAN.R-project.org")
options(repos="https://CRAN.R-project.org")
options(repos="https://CRAN.R-project.org")
install.packages("lavaan")
options(repos='http://cran.rstudio.com/')
options(repos = c(CRAN = "http://cran.rstudio.com"))
options(repos = c(CRAN = "http://cran.rstudio.com"))
getOption("repos")
options(repos = getOption("repos")["CRAN"])
options(repos = getOption("repos")["CRAN"])
setRepositories()
setRepositories()
setRepositories()
setRepositories()
setRepositories()
setRepositories()
setRepositories()
setRepositories()
getOption("repos")
setRepositories()
getOption("repos")
install.packages("dplyr")
install.packages("lavaan", repos="https://cran.rstudio.com/")
library(lavaan)
install.packages("dplyr", repos="https://cran.rstudio.com/")
setRepositories()
setRepositories()
setRepositories()
setRepositories()
setwd("~/_WORKFORCE_ANALYTICS/Workforce Analytics_Tutorials/Employee-Churn-Understanding-using-ML-and-LIME")
# required packages
# install vip from github repo: devtools::install_github("koalaverse/vip")
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
install.packages("vip")
library(pdp)        # ML global interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
# other useful packages
library(tidyverse)  # Use tibble, dplyr
library(rsample)    # Get HR Data via rsample::attrition
install.packages("rsample")
library(gridExtra)  # Plot multiple lime plots on one graph
# initialize h2o
h2o.init()
# create data sets
# Forcing ordered factors to be unordered as h2o does not support ordered categorical variables
df <- rsample::attrition %>%
mutate_if(is.ordered, factor, ordered = FALSE) %>%
mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))
library(rsample)    # Get HR Data via rsample::attrition
install.packages("rsample")
install.packages("rsample")
library(rsample)    # Get HR Data via rsample::attrition
# create data sets
# Forcing ordered factors to be unordered as h2o does not support ordered categorical variables
df <- rsample::attrition %>%
mutate_if(is.ordered, factor, ordered = FALSE) %>%
mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))
index <- 1:5
index
train_obs <- df[-index, ]
local_obs <- df[index, ]
# create h2o objects for modeling
y <- "Attrition"
x <- setdiff(names(train_obs), y)
names(train_obs)
x
train_obs.h2o <- as.h2o(train_obs)
local_obs.h2o <- as.h2o(local_obs)
# Create Random Forest model with ranger via caret
fit.caret <- train(
Attrition ~ .,
data       = train_obs,
method     = 'ranger',
trControl  = trainControl(method = "cv", number = 5, classProbs = TRUE),
tuneLength = 1,
importance = 'impurity'
)
install.packages("ranger")
install.packages("ranger")
devtools::install_github("imbs-hl/ranger")
install.packages("ranger")
library(ranger)
install.packages("C:/Users/lstehlik/Downloads/ranger_0.10.1.tar.gz", repos = NULL, type = "source")
install.packages("Rcpp")
